
* Generell stuff
** Functions
*** Generell Stuff
   #+BEGIN_SRC emacs-lisp

   (defun go-previous-number-lines(number)
   "Go n numbers up"
   (interactive "nLines up:")
   (previous-line number))

   (defun go-next-number-lines(number)
   "Go n numbers down"
   (interactive "nLines down:")
   (next-line number))

   (defun window-half-height ()
   (max 1 (/ (1- (window-height (selected-window))) 2)))
   
   (defun scroll-up-half ()
   (interactive)
   (scroll-up (window-half-height)))
   
   (defun scroll-down-half ()         
   (interactive)                    
   (scroll-down (window-half-height)))
   
#+END_SRC

*** Dashboard Functions
    #+BEGIN_SRC emacs-lisp

    (defun dashboard-render-notes ()  
    (insert "Notes:\n")
    (dashboard-get-notes
    (lambda (x) (insert (concat "    " x)))
    ))

    (defun dashboard-get-notes (func)
      (setq todos ())
      (org-map-entries
        (lambda () 
          (setq todos 
            (cons (thing-at-point 'line t) todos)))
        nil
        'agenda  
      )
      (setq todos (reverse todos))
      (loop for todo in todos do (funcall func todo))
    )
        
    (defun dashboard-insert-notes (list-size)
    (dashboard-render-notes)
    (dashboard-insert-shortcut "n" "Notes:"))

#+END_SRC

** Org Mode
  #+BEGIN_SRC emacs-lisp
  (use-package org
   :ensure t)
  
  (setq org-agenda-files (list "~/agenda/work.org"))
   #+END_SRC

** Interface
*** Hide Gui things
     #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
     
     #+END_SRC
*** get Random Quotes via https://quotesondesign.com/api-v4-0/
     #+BEGIN_SRC emacs-lisp
(use-package request
    :ensure t)

(defvar quote-url "http://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1")
(defvar session-qoute)

(defun get-session-quote() 
   (interactive)
   (insert session-quote)
   
)

(request
 "http://httpbin.org/get"
 :parser 'json-read
 :success (function
           (lambda (&key data &allow-other-keys)
             (setq session-qoute data)
             (insert "I sent: %S" (assoc-default 'args data)))))
    
     #+END_SRC
    
** Theme
   #+BEGIN_SRC emacs-lisp
     (use-package seti-theme
       :ensure t)
     (load-theme 'seti t)
   #+END_SRC
** Basic Settings
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
     (setq-default indent-tabs-mode nil)
     (put 'scroll-left 'disabled nil)
     (set-default 'truncate-lines t)
     
     (windmove-default-keybindings 'meta)

     (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))


     (add-hook 'prog-mode-hook #'hs-minor-mode)
    
     (setq tramp-default-method "ssh")
     
     (load "server")
     (unless (server-running-p) (server-start))

   #+END_SRC
** Keybindings
   #+BEGIN_SRC emacs-lisp
     (use-package evil
     :ensure t)
  

     (global-set-key (kbd "<f1>") 'describe-mode) 
     
     (global-set-key (kbd "M-S-<down>") 'enlarge-window)
     (global-set-key (kbd "M-S-<left>") 'enlarge-window-horizontally)
     (global-set-key (kbd "M-S-<right>") 'shrink-window-horizontally)
     (global-set-key (kbd "M-S-<up>") 'shrink-window)

     (global-set-key (kbd "M-n") 'go-next-number-lines)
     (global-set-key (kbd "M-p") 'go-previous-number-lines)

     (global-set-key [next] (lambda () (interactive) (scroll-up 5)))
     (global-set-key [prior] (lambda () (interactive) (scroll-down 5)))
     (global-set-key (kbd "<M-next>") 'scroll-up-half)
     (global-set-key (kbd "<M-prior>") 'scroll-down-half)

     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "C-x g") 'magit-status)
     (global-set-key (kbd "<f4>") 'helm-buffers-list)
     (global-set-key (kbd "<M-f1>") 'helm-dash)
     (global-set-key (kbd "<f6>") 'compile)
     (global-set-key (kbd "<f5>") 'quickrun)
     (global-set-key (kbd "<f2>") 'rename-file)
     (global-set-key (kbd "C-c C-o") 'hs-toggle-hiding)
     (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)

     (global-set-key (kbd "<f12>") 'undo)
     (global-set-key (kbd "<f8>") 'neotree-toggle)
     (global-set-key (kbd "C-S-f") 'rgrep)
     (global-set-key (kbd "C-R") 'query-replace)
     
#+END_SRC

* Autocomplete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t)

    (use-package popup
    :ensure t)

    (require 'auto-complete)
    (require 'auto-complete-config)
    (ac-config-default)
    (global-auto-complete-mode t)

  #+END_SRC
  
* Add Ons
** Dashboard
     #+BEGIN_SRC emacs-lisp
     (use-package dashboard
     :config
     (dashboard-setup-startup-hook))
     (setq dashboard-banner-logo-title "¯\\_(ツ)_/¯")
     (setq dashboard-startup-banner 'logo)
     
     (setq show-week-agenda-p t)

     (add-to-list 'dashboard-item-generators  '(notes . dashboard-insert-notes))
     (setq dashboard-items '((recents . 10)(notes . 10)(bookmarks)(agenda . 10)))                            

     (dashboard-insert-shortcut "b" "Bookmarks:")

     #+END_SRC

** Tree View
#+BEGIN_SRC emacs-lisp 
 (use-package neotree  
  :ensure t)
  #+END_SRC
** REST Client
#+BEGIN_SRC emacs-lisp 
 (use-package restclient  
  :ensure t)
 
 (setq auto-mode-alist
   (append
     '(("\\.rest\\'" . restclient-mode))
     auto-mode-alist))

  #+END_SRC
** Magit
  #+BEGIN_SRC emacs-lisp 
 (use-package magit
  :ensure t)
  #+END_SRC
   
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t)
#+END_SRC

** nlinum
#+BEGIN_SRC emacs-lisp
   (use-package nlinum
    :ensure t)
#+END_SRC

** nlinum-relative
#+BEGIN_SRC emacs-lisp
   (use-package nlinum-relative
    :ensure t)

    (setq nlinum-relative-redisplay-delay 0) 
    (setq nlinum-relative-current-symbol "->")   
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)
#+END_SRC

* Programming
** Groovy
   #+BEGIN_SRC emacs-lisp
   
   (use-package groovy-mode
   :ensure t)

   #+END_SRC

** Jenkins
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist
             '("Jenkinsfile" . groovy-mode))

   #+END_SRC

** Golang
*** General
   #+BEGIN_SRC emacs-lisp

(use-package go-mode
  :ensure t)

(use-package go-autocomplete
  :ensure t)

(defun my-go-mode-hook ()
  (interactive)
  ; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)

  ; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v -gcflags '-N -l' && go test -v && go vet"))
  
  ; Godef jump key binding
  (local-set-key (kbd "M-.") 'godef-jump)
  (require 'go-autocomplete)

  (setq-local helm-dash-docsets '("Go"))
  (message "Go Hook loaded"))
 
(add-hook 'go-mode-hook 'my-go-mode-hook)

   #+END_SRC
    
*** Goto Project snipped
#+BEGIN_SRC emacs-lisp    
   (load "~/.emacs.d/local/goprojectfinder.el")       
#+END_SRC    

** Python
*** Autocomplete
   #+BEGIN_SRC emacs-lisp

   (add-hook 'python-mode-hook 'python-hook-f)

   (use-package python-environment
   :ensure t)

   (use-package pyvenv
   :ensure t)


   (use-package jedi
   :ensure t)

   (setq jedi:setup-keys t)
   (setq jedi:use-shortcuts t)

   (add-hook 'python-mode-hook 'jedi:setup)
   (setq jedi:complete-on-dot t)  

   #+END_SRC
   
*** Spell Checker
   #+BEGIN_SRC emacs-lisp
   
   (use-package flycheck
   :ensure t)

   (global-flycheck-mode)  

   #+END_SRC
  
*** PEP8
   #+BEGIN_SRC emacs-lisp
   
   (use-package py-autopep8
   :ensure t)

   (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)

   #+END_SRC
    
** TypeScrip
#+BEGIN_SRC emacs-lisp


(use-package tide
  :ensure t)

(use-package typescript-mode
  :ensure t)

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))
 
(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'typescript-mode-hook #'setup-tide-mode)

   #+END_SRC
** Lua
#+BEGIN_SRC emacs-lisp

(use-package lua-mode
  :ensure t)

#+END_SRC
** Dataformats
   #+BEGIN_SRC emacs-lisp
   (use-package json-mode
   :ensure t)

   (use-package yaml-mode
   :ensure t)
 
   (use-package sqlite
   :ensure t)

  #+END_SRC
   
** Quickrun
   #+BEGIN_SRC emacs-lisp

   (use-package quickrun
   :ensure t)

   #+END_SRC
* Random Stuff
** Nyan Cat
   #+BEGIN_SRC emacs-lisp
   
   (use-package nyan-mode
   :ensure t)

   (nyan-mode)
   (nyan-start-animation)

   #+END_SRC
