* Generell stuff
** Interface
*** Hide Gui things
     #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
     
     #+END_SRC
*** Splash screen
     #+BEGIN_SRC emacs-lisp


(use-package dashboard
  :config
  (dashboard-setup-startup-hook))

(setq dashboard-banner-logo-title "(ᴗ˳ᴗ)")
(setq dashboard-startup-banner 'logo)

     #+END_SRC
*** get Random Quotes via https://quotesondesign.com/api-v4-0/
     #+BEGIN_SRC emacs-lisp
(use-package request
    :ensure t)

(defvar quote-url "http://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1")
(defvar session-qoute)

(defun get-session-quote() 
   (interactive)
   (insert session-quote)
   
)

(request
 "http://httpbin.org/get"
 :parser 'json-read
 :success (function
           (lambda (&key data &allow-other-keys)
             (setq session-qoute data)
             (insert "I sent: %S" (assoc-default 'args data)))))
    
     #+END_SRC
    
** Theme
   #+BEGIN_SRC emacs-lisp
     (use-package zenburn-theme
       :ensure t)
     (load-theme 'zenburn t)
   #+END_SRC
** Basic Settings
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
     (setq-default indent-tabs-mode nil)
     (set-default 'truncate-lines t)
     
     (add-hook 'find-file-hook (lambda () (linum-mode 1)))
     (windmove-default-keybindings 'meta)

     (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))


     (add-hook 'prog-mode-hook #'hs-minor-mode)

   #+END_SRC
** Keybindings
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f1>") 'describe-mode) 
     (global-set-key (kbd "<f6>") 'revert-buffer)
     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "C-x g") 'magit-status)
     (global-set-key (kbd "<f4>") 'helm-buffers-list)
     (global-set-key (kbd "<M-f1>") 'helm-dash)
     (global-set-key (kbd "C-<f5>") 'compile)
     (global-set-key (kbd "<f5>") 'quickrun)
     (global-set-key (kbd "<f2>") 'helm-projectile)
     (global-set-key (kbd "C-c C-o") 'hs-toggle-hiding)
     (global-set-key (kbd "<f6>") 'query-replace)
#+END_SRC

* Autocomplete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t)

    (require 'auto-complete)
    (require 'auto-complete-config)
    (ac-config-default)
    (global-auto-complete-mode t)

  #+END_SRC
  
* Add Ons
** REST Client
#+BEGIN_SRC emacs-lisp 
 (use-package restclient  
  :ensure t)
 
 (setq auto-mode-alist
   (append
     '(("\\.http\\'" . restclient-mode))
     auto-mode-alist))

  #+END_SRC

** Magit
  #+BEGIN_SRC emacs-lisp 
 (use-package magit
  :ensure t)
  #+END_SRC
   
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t)
#+END_SRC
* Programming
** Groovy
   #+BEGIN_SRC emacs-lisp
   
   (use-package groovy-mode
   :ensure t)

   #+END_SRC

** Jenkins
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist
             '("Jenkinsfile" . groovy-mode))

   #+END_SRC

** Golang

   #+BEGIN_SRC emacs-lisp

(use-package go-mode
  :ensure t)

(use-package go-autocomplete
  :ensure t)

(defun my-go-mode-hook ()
  (interactive)
  ; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)

  ; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v -gcflags '-N -l' && go test -v && go vet"))
  
  ; Godef jump key binding
  (local-set-key (kbd "M-.") 'godef-jump)
  (require 'go-autocomplete)

  (setq-local helm-dash-docsets '("Go"))
  (message "Go Hook loaded"))
 
(add-hook 'go-mode-hook 'my-go-mode-hook)

   #+END_SRC
    
** Python
*** Autocomplete
   #+BEGIN_SRC emacs-lisp
   (setq jedi:setup-keys t)
   (setq jedi:use-shortcuts t)

   (use-package jedi
   :ensure t)

   (add-hook 'python-mode-hook 'jedi:setup)
   (setq jedi:complete-on-dot t)  

   #+END_SRC
   
*** Spell Checker
   #+BEGIN_SRC emacs-lisp
   
   (use-package flycheck
   :ensure t)

   (global-flycheck-mode)  

   #+END_SRC
  
*** PEP8
   #+BEGIN_SRC emacs-lisp
   
   (use-package py-autopep8
   :ensure t)

   (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)

   #+END_SRC
    
** TypeScrip
#+BEGIN_SRC emacs-lisp


(use-package tide
  :ensure t)

(use-package typescript-mode
  :ensure t)

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))
 
(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'typescript-mode-hook #'setup-tide-mode)

   #+END_SRC
** Dataformats
   #+BEGIN_SRC emacs-lisp
   (use-package json-mode
   :ensure t)

   (use-package yaml-mode
   :ensure t)
 
   (use-package sqlite
   :ensure t)

  #+END_SRC
   
** Quickrun
   #+BEGIN_SRC emacs-lisp

   (use-package quickrun
   :ensure t)

   #+END_SRC
* Random Stuff
** Nyan Cat
   #+BEGIN_SRC emacs-lisp
   
   (use-package nyan-mode
   :ensure t)

   (nyan-mode)
   (nyan-start-animation)

   #+END_SRC
